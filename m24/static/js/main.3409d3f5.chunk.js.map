{"version":3,"sources":["registerServiceWorker.js","App/Screener/rows.js","App/Screener/index.js","App/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","SignalHeaderRow","_ref","columns","changeSortColumn","resetSorting","react_default","a","createElement","reactstrap_es","onClick","map","col","key","id","toUpperCase","SignalRow","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","selected","inherits","createClass","value","_this2","_this$props","symbol","performances","showHigh","className","concat","setState","objectSpread","style","color","target","href","change","toFixed","Component","Screener","e","sortColumn","changeDisplay","extractColums","data","_","initial","keys","sort","orderBy","p","symbolPerformance","fluid","perf","rows_SignalRow","SUBS_SIGNALS","gql","_templateObject","App","react_apollo_browser_umd","subscription","_ref$data","loading","Screener_Screener","setTimeout","reconnect","Date","now","wsLink","WebSocketLink","uri","options","errorLink","onError","graphQLErrors","networkError","httpLink","HttpLink","headers","authorization","process","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","ApolloLink","from","link","split","_ref2","query","_getMainDefinition","getMainDefinition","kind","operation","cache","InMemoryCache","client","ApolloClient","ReactDOM","render","src_App","document","getElementById","URL","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3409d3f5.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Index is cached for offline use.\" message.\n              console.log('Index is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport {Col, Row} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\n\n\nexport function SignalHeaderRow({ columns, changeSortColumn, resetSorting }) {\n    return <Row>\n        <Col onClick={resetSorting}>Reset</Col>\n        {/*<Col id={'pos'} onClick={changeSortColumn}>Position</Col>*/}\n        {/*<Col key={col} id={col} onClick={changeSortColumn}>{col}</Col>*/}\n        {columns.map(col =>\n            <Col key={col} id={col} onClick={changeSortColumn}>{col.toUpperCase()}</Col>\n        )}\n        {/* <Col>\n                    <Dropdown group isOpen={this.state.dropdownOpen} size=\"sm\" toggle={this.toggle}>\n                        <DropdownToggle caret>\n                            Dropdown\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                            <DropdownItem>Another Action</DropdownItem>\n                        </DropdownMenu>\n                    </Dropdown>\n                </Col>*/}\n    </Row>\n}\n\nexport   class SignalRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { selected: false }\n    }\n\n    render() {\n        let { symbol, columns, showHigh, performances } = this.props;\n        return <Row key={symbol} className={`symbol-row ${this.state.selected ? 'selected' : ''}`}\n                    onClick={() => this.setState({ ...this.state, selected: !this.state.selected })}\n        >\n            <Col style={{ color: '#a0a0c3' }}>\n                <a style={{ color: '#a0a0c3' }} target=\"_blank\"\n                   href={`https://www.tradingview.com/chart/?symbol=BINANCE:${symbol}`}>{symbol}</a> </Col>\n            {/*<Col>{pos} [{meanPosition}][{meanPercentage}]</Col>*/}\n            {columns.map(col => {\n\n                    // let high0 = signal0(col) && signal0(col)[\"change_to_high\"];\n                    // let high = value(col, 'change_to_high')\n                    // let close = value(col, 'change_from_open')\n                    // let absClose = Math.abs(value(col, 'change_from_open') || 0);\n                    // let multiProgres = <Progress multi>\n                    //     <Progress bar value={absClose} max={high + absClose}\n                    //               color={close > 0 ? \"success\" : \"danger\"}\n                    //     >{percent(close)}</Progress>\n                    //     <Progress bar value={high} max={high + absClose}\n                    //               color={\"blue\"}\n                    //     >{percent(high)}</Progress>\n                    // </Progress>;\n                    //\n                    // let progress = <Progress value={absClose} max={high0}\n                    //                          color={close > 0 ? \"success\" : \"danger\"}\n                    // >{percent(close)} [{value(col, 'position_good_spread')}]</Progress>\n                    let change = performances[col].change;\n                    return <Col key={col} style={{ color: change ? (change < 0 ? 'red' : 'green') : '#a1acb7' }}>\n                        {/*{showHigh ? multiProgres : progress}*/}\n                        {change.toFixed(2)}%\n                    </Col>\n                }\n            )}\n        </Row>\n    }\n}\n\nSignalRow.propTypes = {\n    symbol: PropTypes.any,\n    columns: PropTypes.any,\n    showHigh: PropTypes.any,\n    performances: PropTypes.any\n}\n","import {Container,} from \"reactstrap\";\nimport {SignalHeaderRow, SignalRow} from \"./rows\";\n\nimport React, {Component} from 'react';\n\nimport _ from 'lodash';\n\n\nexport default class Screener extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { sortColumn: 'h1' };\n    }\n\n    changeSortColumn = (e) => {\n//        debugger\n        this.setState({ ...this.state, sortColumn: e.target.id })\n    };\n    changeDisplay = (e) => {\n//        debugger\n        this.setState({ ...this.state, showHigh: !this.state.showHigh })\n    };\n\n    extractColums = (data) => {\n        return _.initial(Object.keys(data[0]))\n    };\n\n    sort = (data) => {\n        return this.state.sortColumn ?\n            _.orderBy(data, p => p[this.state.sortColumn].change, ['desc'])\n            : data\n    };\n\n    render() {\n        const columns = this.extractColums(this.props.symbolPerformance);\n        const performances = this.sort(this.props.symbolPerformance);\n\n        return (<Container className=\"App\" fluid>\n            <SignalHeaderRow columns={columns} changeSortColumn={this.changeSortColumn}\n                             resetSorting={()=> this.setState({ ...this.state, sortColumn:null })}/>\n            {performances.map(perf =>\n                <SignalRow key={perf[columns[0]].symbol}\n                           showHigh={this.state.showHigh}\n                           symbol={perf[columns[0]].symbol}\n                           columns={columns} performances={perf}\n                />\n            )}\n        </Container>)\n    }\n}","import React, {Component} from 'react';\n import {Subscription} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nimport './style.css'\nimport Screener from \"./Screener\"\n\n\nconst SUBS_SIGNALS = gql`\n    subscription {\n        symbolPerformance {\n            m5 {\n                symbol\n                change\n            }\n\n            m15 {\n                symbol\n                change\n            }\n            m30 {\n                symbol\n                change\n            }\n            h1 {\n                symbol\n                change\n            }\n            h2 {\n                symbol\n                change\n            }\n            h4 {\n                symbol\n                change\n            }\n            h6 {\n                symbol\n                change\n            }\n            h8 {\n                symbol\n                change\n            }\n            h12 {\n                symbol\n                change\n            }\n            h24 {\n                symbol\n                change\n            }\n        }\n    }\n`;\n\nclass App extends Component {\n\n    render() {\n        return (\n            // {/*<Subscription subscription={SUBS_SIGNALS} variables={{timeframes: this.columns}}>*/}\n            <Subscription subscription={SUBS_SIGNALS}>\n                {({ data: { symbolPerformance } = {}, loading }) => {\n\n                    if (loading) return <span>Loading....</span>;\n                    if (symbolPerformance) {\n                        return <Screener symbolPerformance={symbolPerformance}/>\n                    }\n                    setTimeout(() => this.setState({ ...this.state, reconnect: Date.now() }), 1e3)\n                    return <span>Reconnecting....</span>;\n                }}\n            </Subscription>\n        )\n    }\n}\n\nexport default App;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './App';\n\nimport './style.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {ApolloProvider} from 'react-apollo';\n\nimport {ApolloClient} from 'apollo-client';\nimport {HttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {onError} from 'apollo-link-error';\nimport {ApolloLink} from 'apollo-link';\nimport {WebSocketLink} from 'apollo-link-ws';\nimport {split} from 'apollo-link';\nimport {getMainDefinition} from 'apollo-utilities';\n\nconst HOST_NAME='142.44.246.201';\n// const HOST_NAME='localhost';\n\nconst wsLink = new WebSocketLink({\n    uri: `wss://${HOST_NAME}:4000/graphql`,\n    options: {\n        reconnect: true\n    }\n});\n\nconst errorLink = onError(({graphQLErrors, networkError}) => {\n    if (graphQLErrors) {\n        // do something with graphql error\n    }\n\n    if (networkError) {\n        // do something with network error\n    }\n});\n//const GITHUB_BASE_URL = 'https://api.github.com/graphql';\n\nlet httpLink = new HttpLink({\n    // uri: GITHUB_BASE_URL,\n    uri: `https://${HOST_NAME}:4000/`,\n    // uri: 'http://142.44.246.201:4000/',\n    headers: {\n        authorization: `Bearer ${\n            process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n            }`,\n    },\n});\nhttpLink = ApolloLink.from([errorLink, httpLink]);\n\nconst link = split(\n    // split based on operation type\n    ({query}) => {\n        const {kind, operation} = getMainDefinition(query);\n        return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    httpLink,\n);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n    link,\n    cache,\n});\n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}